Debugging in eclipse IDE
Revise 
Important highlights : upcasting , downcasting , run time polymorphism
Abstraction
Enter complete abstraction : interfaces
Exception Handling



Revision
Fruit <---Apple,Orange,Mango<---Alphonso
Suppose taste() exists in a Fruit class , it's overridden in all sub classes
Suppose toString() is overridden  in Fruit class , also in all sub classes


Solve
1. What will happen ?
Fruit f=new Mango(....);//up casting
f.taste();//JVM : Mango's taste : late binding=run time poly=dyn method dispatch
sop(f);//JVM : Mango's toString
f=new Orange(...);
f.taste();
sop(f);



Solve
Suppose : juicyPulp() is an additional method on Alphonso 

2. Fruit f=new Alphonso();//up casting
f.juicyPulp();//javac err : since juicyPulp()  : does not  exist in Fruit
Soln : downcasting : since it's not a common func across all the fruits , it's Alphonso  specific func.
((Alphonso)f).juicyPulp();//no javac err , no run time err , correct o/p

f=new Orange(...);
((Alphonso)f).juicyPulp();//no javac err,run time : illegal casting : java.lang. ClassCastExc : Orange can't be cast into Alphonso!


Is there any guard or any way to perform RTTI(run time type info) checking ? 
i.e How to avoid class cast exc : instanceof

soln : 
f=new Orange(...);
if(f instanceof Alphonso)
 ((Alphonso)f).juicyPulp();
else
sop("not an Alphonso");


Important : 
When will you need to apply downcasting?
In indirect referencing , i.e when super class ref ---> sub class instance AND it's calling sub class spcific func.

Any probable run time error ?? :  java.lang.ClassCastException

Before down casting :  instanceof checking

Answer this
Can a super class reference DIRECTLY refer to ANY sub class instance ?
(eg : Emp e =new SalesMgr(....);)

Can a sub class reference DIRECTLY refer to super class instance ? NO (javac err!)
What will happpen if u aply downcasting ? : no javac err BUT run time err

What will happen ?
Person p=new Person("a1","b1");
Student s=p;//javac err !
OR 
Student s=(Student) p;//no javac err , JVM : ClassCastExc
s.study();


Refer to Abstraction : hiding implementation details from the end user

Does encapsulation help to achieve Abstraction ? Yes

When do u add abstract methods? : Any time you want to add a common func. in the super class AND you don't have any imple. details 
eg : taste() in Fruit class
area() in BoundedShape

Where  do you add them typically? : super class

abstract method = method with declaration only !
eg : In abstract Fruit class
public abstract String taste();

If u add abstract method/s what about the class ? : MUST be declared as abstract class


Can abstract class be instantiated ? NO
refer to emp hierarchy (from whiteboard diag.)

Emp e = new SalesMgr(......);//no javac err
e=new Mgr(....);//err , RHS : since Mgr is abstract
e=new TempWorker(....);//no javac err
e=new Worker(...);//err , RHS : since Worker is abstract


Can abstract class contain concrete methods ? Yes 

Can abstract class contain a parameterized ctor ? YES
What it be used for ? Creating concrete(=not abstract) sub class instance

Can you declare abstract class with full concrete(=non abstract) func : YES
eg :
public abstract class A
{
 // no abstract method , all concrete methods 
}

What will happen ?
public abstract final class A {....} ---javac err

What will happen ?
class A
{
  private abstract void show();//javac err
}


final keyword
refer to readme



Enter interfaces
Refer to readme
Refer to whiteboard (from interfaces_help)

Objectives
0. Create different type of Printers(ConsolePrinter, FilePrinter ,NetworkPrinter) n access it's common functionality n specific functionality in a single for-each loop.


1. Why Java does not allow multiple inheritance through classes ?
ambiguity (diamond problem)

What will happen with i/fs ?
Demo : Create a class implementing multiple i/fs .
1.1 Will you face ambiguity issue with extact duplicate behaviour ? : 
Why ? : NO
Confirm with example
refer : pkg p2

1.2 Same Method names  with different arg list ???
refer : pkg p3
1.3 Same Method names  same signature n different ret type ???
javac error.
refer : pkg p4

2. Demo : Create a class implementing multiple i/fs .

Will you face ambiguity issue with duplicate data members ? YES
How to resolve : use i/fName.dataMemberName
pkg : p2

3. Demo : 1 i/f extending multiple super i/fs , n then write imple class
In order to create concrete imple class : MUST imple all abstract func inherited from all of i/fs
refer : pkg p5

4. Marker i/f : Empty (Tag i/f) i/f --NO data members n no methods
eg : Serializable , Cloneable

5. Functional i/f : i/f containing single abstract method (SAM)
Java 8 added annotation : @FunctionalInterface : i/f level annotation

-----------------------

Enter Exception Handling : 
What is Exception ? : run time error , detected by JVM (currently by main thread)

Why Exception handling ?
1. To allow the continuation of java app , even in case of run time errors.
2. Reduces the need for checking validation of ret types.
3. Allows a Separation between business logic n error handling

-----------------Pending------------------------
Flow , inheritance hierarchy , checked vs un checked excs
keywords : try, catch , finally , throw , throws , try-with-resources

Custom exceptions
Objective : Validate speed of running vehicle on a highway
min speed : 30
max speed : 80
Vehicle speed : 20 / 100 /60
This validation err : can not be detected by JVM.
Must be done by the prog : keyword : throw new SpeedOutOfRangeException("too slow / too fast");