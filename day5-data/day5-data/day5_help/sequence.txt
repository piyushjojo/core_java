Solve : TestParamPassing3.java (with mem pics)

When you call
System.out.println(ref); 
why does it implicitly call ref.toString() ?
--PrintStream : public void println(Object ref) ---> String.valueOf(Object ref) --> if ref != null -->
ref.toString()

Regarding Saturday session.....
-----------------------------

Today's topics
Revision of inheritance n polymorphism (through examples)
Polymorphism
Abstraction

Revise
Why Inheritance : reduce redundancy n enhance re usability
relationship : IS-A
as you go done the inh. hierarchy : genralization ---> specialization
upper hierarchy : super class / base / parent class
lower : sub class / derived  / child class
keyword : extends
universal super class : java.lang.Object
Types : single (Fruit <---- Mango)
multi level (Fruit <---- Mango <---- Alphonso)
hierarchial (Fruit <---- Mango , Fruit <---- Apple , Orange ....)

not supported : multiple inheritance(via classes)

constr invocation in inheritance hierarchy : refer to diag.
super --keyword in java

super keyword usages
1. To invoke immediate super cls's MATCHING  constr (eg : super(firstName,lastName);)
2. To access super cls's accessible members (eg : super.toString())

Important statements
Sub class IS A super class + something more(addtional data members + methods) + something modified(behaviour : methods : method overriding)

toString ---whose method : java.lang.Object
Method declaration
public String toString() 
What does it return ? : F.Q Cls Name@hashcode
 

What's the need of overriding toString ?
To replace "F.Q Cls Name@hashcode" by actual details (state) of the object(Person/Student/.....)

Important statement : 
Javac resolves the method binding by type of the reference n JVM resolves it by type of the object(instance) it's referring to.

1. Given 
package bank;
public class Account
{
// state : acctNo , name, balance,type
//constr
//what is the best way to return complete info about your bank account ?
@Override //compile time anno , method level anno , typically in sub class : optional : BUT RECO!
//rules : same method name, ret type : same , arg-list : same , access sepc : same or  wider
//in java : no virtual keyword!
//=> all methods are impl virtual : can be overridden
//which methods CAN'T be overridden : private or static or final
public String toString()
{
 return "A/C Summary "+acctNo+" ".....;
}
  
}
In Tester
Account a1=new Account(...);
sop(a1);//a/c details

2. Solve :
class Fruit {
public void taste()
{
 sop("No specific taste");
}
}
class Mango extends Fruit
{
 override : to display "sweet"
}
}
class Orange extends Fruit
{
{
 override : to display "sour"
}
Alphonso extends Mango
{
   override : to display "sweet n juicy"
}

What will happen ?
Fruit f=new Mango();// up casting : impl by javac
f.taste();//javac chks if taste() exists in : Fruit class : yes --no javac err! , JVM : invokes taste() on Mango : sweet 
f=new Orange();//no javac err : since Orange IS-A Fruit (extends) --up casting
f.taste();//JVM invokes : taste() : on Orange's instance --sour
f=new Alphonso();//no javac err : up casting
f.taste();//JVM : taste() : on Alphonso's instance --"sweet n juicy"

What will happen ? 
In Tester class  :
Fruit[] basket={new Mango(),new Orange(),new Alphonso(),new Orange()}; //1 array of refs + 4 fruits

for (Fruit f : basket)//f=basket[0]--> Mango obj....
  sop(f.taste()); //run time poly.


Why Java does not allow multiple inheritance via classes ?
(refer to diagram)

------------------------------Revision over -------------------------

Take a look at this 
Can you add new functionality in a sub class  : YESS

Q : Suppose you have added  a new functionality in Mango : public void pulp(){...}
in Orange : public void juice() {...}

What will happen ?
Fruit f=new Mango();//up casting
f.taste();//no javac err , JVM : sweet 
f.pulp();//javac err : since no pulp() found in Fruit class

Any solution ? : YES : add explicit downcast : why explicit : since Fruit IS NOT a Mango
((Mango)f).pulp(); //no javac err ! , JVM : Mango's pulp() 


f=new Orange(...);//up casting
f.juice();//javac err
//soln : explicit downcasting
((Orange)f).juice();


What will happen ?
f=new Orange(...);//no err
((Mango)f).pulp();//no javac err : Fruit can be downcasted in to a Mango(since Mango IS A Fruit), javac will search for pulp() : in Mango --finds it  --so no errs! , invalid casting --> run time err --> java.lang.ClassCastException : Orange can't be cast into Mango !!!!


Is there any way to find out RTTI (run time type info/identfication) ?
keyword : instanceof : comparison operator : boolean

eg : 
Fruit f=new Orange(...);//no err
if(f instanceof Mango)
((Mango)f).pulp();
else
 sop("Not a Mango , can't be pulped!!!!!");


3. Apply above concepts in event organizer app
Objective : Executing sub class specific functionality.
Add a new method "study" in Student class & "teach" in Faculty class
Option 4 : User i/p : seat no
Check if seat no is valid .
In case of valid seat no  --- If it's a Student , invoke study method , if it's a Faculty invoke teach method

4. instanceof keyword


Discuss compile time polymorphism
(refer to readme)


Discuss co-variance
(refer to readme)



5. Enter abstraction
refer to readme

eg : Shapes scenario
Solve this

1. BoundedShape -- x,y 

public String toString()

2. Circle -- x,y,radius
Method --public double area()
public String toString()

3. Rectangle -- x,y,w,h
Method --public double area()
public String toString()


eg : In a Tester 
Create bounded shapes using dyn init of array n display details n area().
//c1,r1,c2,r2
BoundedShape[] shapes={new Circle(10,20,12.5),new Rectangle(50,100,10,20),new Circle(14,26,12.8),new Rectangle(51,80,10.5,20.6)};//how many objs 
for(BoundedShape s : shapes) {
 sop(s);
 sop(s.area());
}


Can you apply abstraction in the above scenario ? Yes
How ? abstract method n abstract class

After adding the abstraction : 

BoundedShape s=new BoundedShape(10,20);//javac err : RHS 
OR 
BoundedShape s=new Circle(10,20,12.5);
s.area();//area : Circle


