Day 1
1. Refer to "Installation Instructions" from day1-data\day1_help & complete the same.

2. MUST go through "sequence.txt"  from day1-data\day1_help\ & day1-data\day1_help\slides\PPTDay1.pdf

3. Go through simple code samples from day1-data\code\src (optional : for extra practice)

4. Solve (Hands on)
4.1 Accept 2 double values from User (using Scanner). Check data type.
. If arguments are not doubles , supply suitable error message & terminate.
If numbers are double values , print its average.
Hint : Method of Scanner to use : hasNextDouble , nextDouble 

4.2 Display food menu to user. User will select items from menu along with the quantity. (eg 1. Dosa 2. Samosa 3. Idli ... 10 . Generate Bill ) Assign fixed prices to food items(hard code the prices)
When user enters 'Generate Bill' option(10) , display total bill & exit.


OR 
Create java application for the following
Accept 2 numbers from user & operation to perform
1. Add 2.Subtract 3. Multiply 4.Divide 5.Exit
Display the result of the operation. 
Java app must continue to run till user chooses exit option.

OR
Prompt user for how many numbers(double) to accept
Create suitable data structure to hold these numbers.
Prompt user to populate the values in data structure
Display the same.
Prompt user for option
1. Double nums
2. Square nums
3. Square root nums
4. Exit
As per the option , apply this operation on all nums in the data structure
display the result.

Additional reference for long to float conversion
https://stackoverflow.com/questions/15229323/java-why-is-converting-a-long-64-to-float-32-considered-widening/15229379


Day 2

1. Refer to today's sequence
refer : day2-data\code
to revise mem pics , GC ,packages , access specifiers n setting of classapth
refer : day1-data\day1_help\diagrams\different type of vars.png

(refer : whiteboard.png)

2. Solve Tank assignment along with memory picture.

What will be the output ?

class Tank {
  private int level;
  Tank(int l)
   {
     level=l;
   }
  public void setLevel(int level1)
  {
    level=level1;
  }
  public int getLevel()
  {
    return level;
  }
}	

public class Assignment {
  public static void main(String[] args) {
    Tank t1 = new Tank(10);
    Tank t2 = new Tank(20);
     s.o.p("1: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1 = t2;//1st tank obj is marked GC
    s.o.p("2: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t1.setLevel(27);
     s.o.p("3: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
    t2.setLevel(t1.getLevel()+10);
     s.o.p("4: t1.level: " + t1.getLevel() +
          ", t2.level: " + t2.getLevel());
  }
}

3. What will happen (solve ready code samples : along with mem pics )
day2-data\day2_help\params_passing
3.1 TestParamPassing1.java
3.2 TestParamPassing1.java

4. Hands on

Create a  class Point2D  , under package "com.cdac.geometry" for representing a point in x-y co-ordinate system.

4.1 Create a parameterized constructor to accept x & y co-ords.

4.2 Add  show() method  --to return point's x & y co-ords
eg : public String show() {.....}

4.3 Add a non static  , isEqual method to Point2D class : boolean returning method : must return true if both points are having same x,y co-ords or false otherwise.
eg : public boolean isEqual(Point2d anotherPoint)
{
 return this.x == anotherPoint.x && ....;
}

eg : p1.isEqual(p2); 
OR
p2.isEqual(p1)

4.4 Add a non static method , calculateDistance , to calc distance between 2 points
Hint : use distance formula.

eg : In Tester :
double distance=p1.calculateDistance(p2);

In Point2D class
import static java.lang.Math.*;

public double calculateDistance(Point2d anotherPoint)
{
   return sqrt(pow(this.x-anotherPoint.x,2),......);
}

4.5  Create a driver  class(for UI)  , in the "tester" package "TestPoint" , with main(..)

4.6  Accept x,y co-ordinates for 2 points n store the info.
4.7  Display x,y co-ordinates of both of the points plotted  (using show() method)
4.8  Find out if the points  are same or different (Hint : isEqual)
Print the message accordingly. (print SAME or DIFFERENT)
If points are not same , display distance between these 2 points.
------------------------
Extra question1 :
1. Conside below class.
class Emp
{
  private int id;
  private String name;
  private static int noOfEmps;
}
Suppose you create , 10 emps objects, 

How many copies of
id : 10
name : 10
noOfEmps : 1

2. in Test class , in highlighted code(line no 1--6) , how many classes ? 0
how many objs ? 0
JVM is simply allocating the mem to store : 6 refs(pointers)
psvm(....) { 
1. Scanner sc;
2. Emp e;
3. Box b;
4. Date d;
5. String s;
6. int[] data;
}

Day 3
1. import eclipse project day3.1 , in your core java workspace.
Revise it completely using today's sequence , readmes n diagrams

2. Complete pending work

3. Hands on
Continue with day3.1 project , TestBoxArray

 Double box width for all boxes having volume > 100.
Can you use for-each for above requirement ?
If yes , Try it out !

4. If you have completed Point2D based day2 assignment , try this.

4.1   Create a driver  class(for UI)  , in the "tester" package "TestPoints" , with main(..)

Ask user , how many points to plot? : 100
Create suitable array.
4.2  Accept x,y co-ordinates for all the points n store it suitably. : for loop
4.3   Display x,y co-ordinates of all the points plotted so far ,using for-each loop.
4.4   Accept 2 indices from user .
Find out if the points at these indices are same or different (Hint : isEqual)
Print the message accordingly. 
If points are not same , display distance between these 2 points.
eg : In Tester 
sop("Enter 2 indices");
int index1=...
int index2=...
if (....validate indices ....)
{
   if(points[index1].isEqual(....) .....
}
else 
sop(err mesg!);

Draw mem diagram for your clarity.


Day 4

NO new assignments !!!!!

1. import day4.1 eclipse project in your workspace.
Refer to today's sequence , whiteboards n readmes , to revise 
arrays
inheritance
run time polymorphism
Revise 
1.1 Inheritance n it's  types 
1.2 Constructor invocation in the inheritance hierarchy
1.3 Polymorphism n it's  types 
1.4 method overriding rules to achieve run time poly.
1.5 @Override annotation
1.6 Applying it to a real case study : Event organizer app.

2. MUST complete pending work.


3. Answer this
When you call : 
System.out.println(ref);
How does it actually invoke : System.out.println(ref.toString());
Hint : refer to javadocs of PrintStream : println(Object ref) method

Day 5

Follow daily sequence.
1. import day5.1 , to revise inheritance , run time polymorphism , up casting downcasting n instanceof checking

2. import day5.2 , to understand need of abstraction

3. import day5.3 to revise abstract method n class.

4. Solve ready code samples.

5. Hands on 

5.1 Can you arrange Fruit,Apple,Orange,Mango in inheritance hierarchy ?
Use tight encapsulation.

5.2 Properties (instance variables)  : color : String , weight : double , name:String, fresh : boolean

5.3 Add suitable constructors.

5.4 Override  toString correctly to return state of all fruits (return only  : name ,color , weight )

5.5 Add a taste() method : public String taste()

For Fruit : Can you identify taste of any general fruit ?
So will you add a taste() with this definition : returns "no specific taste" OR can u apply abstraction(now or may be later !)

Apple : should return  "sweet n sour"
Mango : should return  "sweet"
Orange : should return  "sour"

5.6 Add specific functionality , in the sub classes
In Mango : public void pulp() {Display name n color of the fruit + a mesg  creating  pulp!}
In Orange : public void juice() {Display name n weight of the fruit + a mesg extracting juice!}
In Apple : public void jam() {Display name of the fruit + a mesg  making jam!}


5.7 Add all of above classes under the package "com.app.fruits"
5.8 Create java application FruitBasket , with main method , as a tester
5.9 Prompt user for the basket size n create suitable data structure

5.10 Supply options
1. Add Mango
2. Add Orange
3. Add Apple
NOTE : You will be adding a fresh fruit in the basket , in all of above options.

4. Display names of all fruits in the basket.

5. Display name,color,weight , taste of all fresh fruits , in the basket.


6. Mark a fruit in a basket , as stale(=not fresh)
i/p : index 
o/p : error message (in case of invalid index) or mark it stale

7. Mark all sour fruits stale 
Hint : Use equals() method of the String class.

8. Invoke fruit specific functionality (pulp / juice / jam)
i/p : index
Invoke correct functionality (pulp / juice / jam)

10. Exit 
--------------------
Query

Tester 

Person p=new Person("a1","b1");
Student s=p;//javac err
OR 
Student s=(Student) p;//javac err : no  , illgeal casting : detected at run time : CCE
s.study();//will not reach here : as code aborts earlier !!!!!!

Day 6
1. Complete pending work.

2. Refer to today's sequence to revise.
import day6.1 in your workspace .
Revise interfaces.

3. Hands on : OPTIONAL
(refer to a diagram : stack_assignment_help.png)

 Create Java application for fixed stack & growable stack based on Stack i/f , for storing customer details

Customer has : id(int), name (string) , address(string)
Provide suitable constructor n toString


Steps
3.1  Create Customer class
3.2 Stack interface -- push & pop functionality for Customer refs. & declare STACK_SIZE as a constant. 
3.3 Create implementation class of Stack i/f -- FixedStack (array based)
3.4 Create another implementation class of Stack i/f-- GrowableStack (array based)
Can you add inheritance between Fixed Stack n Growable Stack ? YES 

3.5
Create Tester class (Hint :  use dynamic method dispatch using interfaces)
Display Menu
Note : Must use 1 switch-case only. You won't need any complex nested control structure
Once user selects either fixed or growable stack , user shouldn't be allowed to change the selection of the stack.

1 -- Choose Fixed Stack
Hint : fixed stack instance :
ctor
ref=new FixedStack();

2 -- Choose Growable Stack
Accept following options only after initial selection

3 -- Push data 
I/P : Accept customer details & store these details in the earlier chosen stack or give error mesg : NO stack chosen !!!
In case user has chosen fixed stack , n stack is full give err mesg. 
In case of growable stack , should be able to save customer details w/o getting err.

4 --- Pop data & display the same (from the earlier chosen stack or give error mesg : NO stack chosen !!!)
No inputs are required : pop customer details from the top of the stack

5 -- Exit


Day 7
1. import day7.1 , to revise exception handling - flow , keywords , custom exceptions

2. import day7.1 , to revise string handling

3. As per our discussion , try to complete , Day6's stack assignment
If you have completed it already , use exception handling , to raise run time errors.


Day 8
Refer to today's sequence .

1. import day8.1 to revise
1.1 String API
1.2 StringBuilder API
1.3 Date / Time Handling 
1.4 var-args
1.4 Enums in java (refer : day8-data\day8_help\enums\regarding enums.txt)

2. import day8.2 to revise
Core classes : Vehicle 
2.1 Vehicle HAS-A manufacturing date (java.util.Date)
2.2 Revise SimpleDateFormat , parse n format methods
2.3 Refer to the testers

3. import day8.3 to revise
Java enums
Refer to de compiled code (Color.jad)

4. After completing revision , discuss n build the following, with help of lab faculty

Showroom Management system , which will keep track of vehicles added in the showroom.

1. Prompt showroom capacity
Create suitable array.

Options
1. Add Vehicle to the showroom.
Accept data --validate all i/ps --success -- add vehicle
o.w : throw exc (built in / custom exc)

2. Display all vehicle details

10. Exit

Add  validation rules (in a separate class , as static methods)
1 manufactureDate : must be in current financial year(1st Apr 2022 ---31st Mar 2023)
Currently use hard coded values for date boundary.

2 Vehicle color must be from the available color.

3 Base price : min 10000 , max 100000

4. OPTIONAL (based upon equals) 
 No dup vehicles should be added in the showroom